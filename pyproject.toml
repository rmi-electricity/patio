[build-system]
requires = [ "setuptools>=60", "setuptools_scm>=8" ]
build-backend = "setuptools.build_meta"

[project]
name = "patio"
license = { file = "LICENSE.txt" }
readme = "README.rst"
dynamic = [ "version" ]
classifiers = [
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.13,<3.14"
dependencies = [
    "rmi.dispatch[viz] @ git+https://github.com/rmi/dispatch.git",
    "rmi.etoolbox @ git+https://github.com/rmi/etoolbox.git",
    "highspy>=1.10.0,<2",
    "pandas>=2.2.3,<3",
    "requests",
    "scipy>=1.15.2,<2",
    "geopandas>=1.0.1,<2",
    "scikit-learn>=1.6.1,<2",
    "cvxpy>=1.6.5,<2",
    "gurobipy>=12.0.1,<13",
    "coptpy>=7.2.7,<8",
    "openpyxl>=3.1.5,<4",
    "polars[connectorx,fsspec,xlsx2csv,calamine,xlsxwriter]>=1.25.0,<1.29.0",
    "pypdf>=5.4.0,<6",
    "tqdm>=4.67.1,<5",
]

[project.optional-dependencies]
dev = [
    "coverage>=5.3,<7.10",  # Lets us track what code is being tested
    "pytest>=6.2,<8.5",  # test framework
    "pytest-console-scripts>=1.1,<1.5",  # Allow automatic testing of scripts
    "pandas-stubs",
    "doc8>=0.9,<2.1",  # Ensures clean documentation formatting
    "furo>=2023.09.10",  # A clean customisable Sphinx documentation theme.
    "rstcheck[sphinx,toml]>=5.0,<6.3",  # ReStructuredText linter
    "sphinx>=4,!=5.1.0,<8.2.4",
    "sphinx-autoapi>=1.8,<3.7",
    "sphinx-issues>=1.2,<5.1",
    "sphinx-autodoc-typehints>1.19,<3.2.0",
    "sphinxcontrib-mermaid>0.7,<1.1.0",
]

[project.scripts]  # entry points
patio = "patio.cli:main"
patio-colo = "patio.model.colo_core:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = { attr = "patio._version.__version__" }

[tool.setuptools_scm]
write_to = "src/patio/_version.py"

#######################################################################################
# Configurations for pixi and uv
#######################################################################################
[tool.pixi.workspace]
channels = [ "conda-forge" ]
platforms = [ "osx-arm64", "linux-64" ]

[tool.pixi.pypi-dependencies]
patio = { path = ".", editable = true }

[tool.pixi.dependencies]
numpy = "*"
pandas = "*"
numba = "*"
cvxopt = "*"
highspy = "*"
geopandas = "*"
scipy = "*"
pixi-pycharm = ">=0.0.8,<0.0.9"

[tool.pixi.environments]
default = { features = [ "dev" ], solve-group = "default" }
econ = { features = [ "dev", "econ" ], solve-group = "default" }

[tool.pixi.activation]
# this is needed because r-reticulate needs conda-meta/history that pixi doesn't provide
# we also need to download the BBB....xlsm config file
scripts = [ "activation/env_setup.sh" ]

[tool.pixi.tasks]
pre_commit = { cmd = [
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-no-eval", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-no-log-warn", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-check-blanket-noqa", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-merge-conflict", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-yaml", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-case-conflict", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "debug-statements", ";",
    "pre-commit", "run", "--all-files", "--show-diff-on-failure", "name-tests-test", ";",
] }
lint = { cmd = [ "ruff", "check", "." ], depends-on = [ "pre_commit" ] }
docs = { cmd = [
    "rm", "-rf", "docs/_build", ";",
    "doc8", "docs/", "README.rst", "&&",
    "rstcheck", "--config", "pyproject.toml", "--recursive", "./", "&&",
    "sphinx-build", "-b", "html", "docs", "docs/_build/html",
] }
test = { cmd = [
    "coverage", "erase", "&&",
    "coverage", "run", "--source=src/patio", "-m", "pytest", "--doctest-modules", "src/patio", "tests", "&&",
    "coverage", "lcov", "-o", "coverage.info", "&&",
    "coverage", "report", "--sort=cover",
] }
ci = { depends-on = [ "lint", "docs", "test" ] }
base = { cmd = "echo base {{ datestr }}", args = [ "datestr" ] }
hh = { cmd = "echo hh {{ datestr }}", args = [ "datestr" ], depends-on = [{ task = 'base', args = [ "{{ datestr }}" ] } ] }

[tool.pixi.feature.econ.dependencies]
r-base = ">=4.4.3,<4.5"
r-lubridate = ">=1.9.4,<2"
r-arrow = ">=19.0.1,<20"
r-readxl = ">=1.4.5,<2"
r-dplyr = ">=1.1.4,<2"
r-lmtest = ">=0.9_40,<0.10"
r-ggplot2 = ">=3.5.2,<4"
r-broom = ">=1.0.8,<2"
r-tidyr = ">=1.3.1,<2"
r-janitor = ">=2.2.1,<3"
r-purrr = ">=1.0.4,<2"
r-stringr = ">=1.5.1,<2"
r-bit64 = ">=4.6.0_1,<5"
r-fredr = ">=2.1.0,<3"
r-reticulate = ">=1.42.0,<2"
r-jsonlite = ">=2.0.0,<3"
r-stringdist = ">=0.9.15,<0.10"
r-styler = ">=1.10.3,<2"
r-miniui = ">=0.1.2,<0.2"
r-shiny = ">=1.11.0,<2"

[tool.pixi.feature.econ]
target.linux.tasks.rstudio = "rstudio"
target.osx.tasks.rstudio = "open -a rstudio"
# this is needed because r-reticulate needs conda-meta/history that pixi doesn't provide
# we also need to download the BBB....xlsm config file, and install other R packages
activation.scripts = [ "activation/env_setup.sh", "activation/r_setup.sh" ]
activation.env = { PIXI_R_LIBS = "$CONDA_PREFIX/lib/R/library", R_LIBS = "$PIXI_R_LIBS", R_LIBS_USER = "$PIXI_R_LIBS" }

[tool.pixi.feature.econ.tasks.patio-data]
cmd = "Rscript 'R/Patio Model Utilities Inputs.R' {{ datestr }}"
args = [ "datestr" ]
outputs = [
    "econ_results/{{ datestr }}_unit_financial_inputs.parquet",
    "econ_results/{{ datestr }}_asset_owners.parquet",
]

[tool.pixi.feature.econ.tasks.patio-econ]
cmd = "Rscript 'R/Patio Model Economic Analysis.R' {{ datestr }}"
args = [ "datestr" ]
depends-on = [ { task = 'patio-data', args = [ "{{ datestr }}" ] } ]
inputs = [
    "econ_results/{{ datestr }}_unit_financial_inputs.parquet",
    "econ_results/{{ datestr }}_asset_owners.parquet",
]
outputs = [
    "econ_results/{{ datestr }}_final_outputs.parquet",
    "econ_results/{{ datestr }}_scenario_selected.parquet",
    "econ_results/{{ datestr }}_parameters.json",
]

[tool.uv]
constraint-dependencies = [ "kaleido!=0.2.1.post1" ]

#######################################################################################
# Configurations for linters and other tools
#######################################################################################
[tool.doc8]
max-line-length = 95
ignore-path = "docs/_build"

[tool.pytest.ini_options]
testpaths = [ "." ]
addopts = [ "--verbose" ]
log_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_date_format = " %Y-%m-%d %H:%M:%S"
log_cli = true
log_cli_level = "INFO"
doctest_optionflags = [ "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL", "ELLIPSIS" ]
filterwarnings = [
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]",
]

[tool.rstcheck]
report_level = "WARNING"
ignore_roles = [ "pr", "issue", "user", "include" ]
ignore_messages = '(Hyperlink target .* is not referenced\.$|Duplicate implicit target name:|An `AttributeError` error occured.*)'
ignore_directives = [ "bibliography", "todo", "include" ]

[tool.ruff]
line-length = 95
show-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
select = [  # https://beta.ruff.rs/docs/rules/
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # flake8-docstrings
    "E",  # pycodestyle
    "F",  # Pyflakes
    "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "TID", # flake8-tidy-imports
    "N", # pep8-naming
    "PD",  # pandas
    "PT", # flake8-pytest-style
    "PGH", # pygrep-hooks
    "S", # bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "UP", # pyupgrade
    "W",  # pycodestyle
    "RUF", # Ruff-specific rules
    "Q", # flake8-quotes
]
ignore = [
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D401",  # First line of docstring should be in imperative mood: "{first_line}"
    "E501",  # black handles code line length
    "D407",  # dashed-underline-after-section, upsets Sphinx
    # conflict with ruff format
    "W191",  # tab-indentation
    "E111",  # indentation-with-invalid-multiple
    "E114",  # indentation-with-invalid-multiple-comment
    "E117",  # over-indented
    "D206",  # indent-with-spaces
    "D300",  # triple-single-quotes
    "Q000",  # bad-quotes-inline-string
    "Q001",  # bad-quotes-multiline-string
    "Q002",  # bad-quotes-docstring
    "Q003",  # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
    "SIM105",  # Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    "S610",  # Use of Django `extra` can lead to SQL injection vulnerabilities
    # Legacy issues not worth addressing now
    "S110",  # `try`-`except`-`pass` detected, consider logging the exception
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # missing docstring in method
    "D103",  # missing docstring in function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "D205",  # missing-blank-line-after-summary
    "D415",  # First line should end with a period, question mark, or exclamation point
    "E741",  # Ambiguous variable name: `l`
    "N802",  # Function name should be lowercase
    "FBT003",  # Boolean positional value in function call
    "FBT002",  # Boolean default positional argument in function definition
    "PD008",  # Use `.loc` instead of `.at`. If speed is important, use NumPy.
    "PD901",  # Avoid using the generic variable name `df` for DataFrames
    "PD010",  # `.pivot_table` is preferred to `.pivot` or `.unstack`; provides same functionality
    "RUF015",  # Prefer `next(...)` over single element slice
    "RUF005",  # Consider iterable unpacking instead of concatenation
    "W505",  # Doc line too long (89 > 88)
    "S101",  # Use of `assert` detected
    "N806",  # Variable `PDATA` in function should be lowercase
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
]
flake8-tidy-imports.ban-relative-imports = "all"
flake8-type-checking.strict = true
pycodestyle.max-doc-length = 88
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [ "F401" ]
"docs/conf.py" = [ "E501" ]
"tests/*.py" = [ "S101", "SIM117", "F841", "D100", "D101", "PD901", "PT028", "PD011", "B011", "RUF012", "PT015", "PT006" ]
