[build-system]
requires = [ "setuptools>=60", "setuptools_scm>=8" ]
build-backend = "setuptools.build_meta"

[project]
name = "rmi.cheshire"
description = "A modified template based on ``catalyst-cooperative/cheshire``."
license = { file = "LICENSE.txt" }
readme = "README.rst"
dynamic = [ "version" ]
classifiers = [
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<3.14"
dependencies = [
    "pandas>=1.4,<2.4",
    # etoolbox provides a number of useful tools for working with data. It also includes
    # functions and infrastructure for accessing PUDL data stored on GCS so the sqlite
    # database is not requried
    "rmi.etoolbox @ git+https://github.com/rmi/etoolbox.git",
]

[project.optional-dependencies]
dev = [
    "coverage>=5.3,<7.10",  # Lets us track what code is being tested
    "pytest>=6.2,<8.5",  # test framework
    "pytest-console-scripts>=1.1,<1.5",  # Allow automatic testing of scripts
]
doc = [
    "doc8>=0.9,<2.1",  # Ensures clean documentation formatting
    "furo>=2023.09.10",  # A clean customisable Sphinx documentation theme.
    "rstcheck[sphinx,toml]>=5.0,<6.3",  # ReStructuredText linter
    "sphinx>=4,!=5.1.0,<8.2.4",
    "sphinx-autoapi>=1.8,<3.7",
    "sphinx-issues>=1.2,<5.1",
    "sphinx-autodoc-typehints>1.19,<3.2.0",
    "sphinxcontrib-mermaid>0.7,<1.1.0",
]
qa = [ # in local development these are provided globally, here for GHA
    "pre-commit>=2.9,<4.3",  # Allow us to run pre-commit hooks in testing
    "pre-commit-uv>=4.1,<4.2",
    "ruff>0.0.215,<0.12.1",
]
tooling = [ # in local development these are provided globally
    "rmi-cheshire[qa]",
    "tox>=4.16.0,<4.28",  # Python test environment manager
    "tox-uv>=1.25,<2",
]
tests = [ "rmi-cheshire[dev,tooling]" ]
types = []

[project.scripts]  # entry points
winston = "cheshire.cli:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = { attr = "cheshire._version.__version__" }

[tool.setuptools_scm]
write_to = "src/cheshire/_version.py"

#######################################################################################
# Configurations for linters and other tools
#######################################################################################
[tool.doc8]
max-line-length = 88
ignore-path = "docs/_build"

[tool.pytest.ini_options]
testpaths = [ "." ]
addopts = [ "--verbose" ]
log_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_date_format = " %Y-%m-%d %H:%M:%S"
log_cli = true
log_cli_level = "INFO"
doctest_optionflags = [ "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL", "ELLIPSIS" ]
filterwarnings = [
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]",
]

[tool.rstcheck]
report_level = "WARNING"
ignore_roles = [ "pr", "issue", "user", "include" ]
ignore_messages = '(Hyperlink target .* is not referenced\.$|Duplicate implicit target name:|An `AttributeError` error occured.*)'
ignore_directives = [ "bibliography", "todo", "include" ]

[tool.ruff]
line-length = 88
show-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
select = [  # https://beta.ruff.rs/docs/rules/
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # flake8-docstrings
    "E",  # pycodestyle
    "F",  # Pyflakes
    "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "TID", # flake8-tidy-imports
    "N", # pep8-naming
    "PD",  # pandas
    "PT", # flake8-pytest-style
    "PGH", # pygrep-hooks
    "S", # bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "UP", # pyupgrade
    "W",  # pycodestyle
    "RUF", # Ruff-specific rules
    "Q", # flake8-quotes
]
ignore = [
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D401",  # First line of docstring should be in imperative mood: "{first_line}"
    "E501",  # black handles code line length
    "D407",  # dashed-underline-after-section, upsets Sphinx
    # conflict with ruff format
    "W191",  # tab-indentation
    "E111",  # indentation-with-invalid-multiple
    "E114",  # indentation-with-invalid-multiple-comment
    "E117",  # over-indented
    "D206",  # indent-with-spaces
    "D300",  # triple-single-quotes
    "Q000",  # bad-quotes-inline-string
    "Q001",  # bad-quotes-multiline-string
    "Q002",  # bad-quotes-docstring
    "Q003",  # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
]
flake8-tidy-imports.ban-relative-imports = "all"
flake8-type-checking.strict = true
pycodestyle.max-doc-length = 88
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [ "F401" ]
"docs/conf.py" = [ "E501" ]
"tests/*.py" = [ "S101", "SIM117", "F841", "D100", "D101", "PD901" ]

[tool.tox]
env_list = [ "linters", "docs", "ci" ]

[tool.tox.env_run_base]
allowlist_externals = [ "bash", "coverage", "sphinx-build", "pytest", "ruff", "pre-commit" ]
runner = "uv-venv-runner"
extras = [ "qa", "dev", "doc" ]

[tool.tox.env.linters]
description = "Run the pre-commit, flake8 and bandit linters."
commands = [
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-no-eval" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-no-log-warn" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "python-check-blanket-noqa" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-merge-conflict" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-yaml" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "check-case-conflict" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "debug-statements" ],
    [ "pre-commit", "run", "--all-files", "--show-diff-on-failure", "name-tests-test" ],
    [ "ruff", "check", "." ],
]

[tool.tox.env.docs]
description = "Build the HTML docs from scratch using Sphinx."
commands = [
    [ "bash", "-c", "rm -rf docs/_build" ],
    [ "doc8", "docs/", "README.rst" ],
    [ "rstcheck", "--config", "pyproject.toml", "--recursive", "./" ],
    [ "sphinx-build", "-b", "html", "docs", "docs/_build/html" ],
]

[tool.tox.env.ci]
description = "un all continuous integration (CI) checks & generate test coverage."
commands = [
    [ "coverage", "erase" ],
    [ "coverage", "run", "--source={envsitepackagesdir}/cheshire", "-m", "pytest", "--doctest-modules", "{envsitepackagesdir}/cheshire", "tests" ],
    [ "coverage", "lcov", "-o", "coverage.info" ],
    [ "coverage", "report", "--sort=cover" ],
]
